Fibonacci series without recursion
Fibonacci series is defined as a sequence of numbers in which the first two numbers are 1 and 1, or 0 and 1, depending on the selected 
beginning point of the sequence, and each subsequent number is the sum of the previous two. So, in this series, the nth term is the sum of (n-1)th term and (n-2)th term. 
Fibonacci Series in C++: In case of fibonacci series, next number is the sum of previous two numbers for example 0, 1, 1, 2, 3, 5, 8, 13, 21 etc. The first two numbers 
of fibonacci series are 0 and 1.
There are two ways to write the fibonacci series program:
- Fibonacci Series without recursion
- Fibonacci Series using recursion

Step-1: Start
Step-2: Declare variables i, a,b , show
Step-3: Initialize the variables, a=0, b=1, and show =0
Step-4: Enter the number of terms of Fibonacci series to be printed
 Print First two terms of series
Step-5: Use loop for the following steps
 -> show=a+b
 -> a=b
 -> b=show
 -> increase value of i each time by 1
 -> print the value of show
Step-6: End

# Program to display the Fibonacci sequence up to n-th term
nterms = int(input("How many terms? "))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print("Please enter a positive integer")
# if there is only one term, return n1
elif nterms == 1:
   print("Fibonacci sequence upto",nterms,":")
   print(n1)
# generate fibonacci sequence
else:
   print("Fibonacci sequence:")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1

Fibonacci series in Cpp

#include <iostream>
using namespace std;
int main() {
 int n1=0,n2=1,n3,i,number;
cout<<"Enter the number of elements: ";
cin>>number;
cout<<n1<<" "<<n2<<" "; //printing 0 and 1
for(i=2;i<number;++i) //loop starts from 2 because 0 and 1 are already printed
{
 n3=n1+n2;
 cout<<n3<<" ";
 n1=n2;
 n2=n3;
}
 return 0;
 }
Output:
Enter the number of elements: 10
0 1 1 2 3 5 8 13 21 34

# Time Complexity Analysis:
# Time Complexity: O(n)
# The iterative approach calculates Fibonacci numbers from the bottom up, starting with the base cases and using a loop to calculate each Fibonacci number only once. This results in a linear time complexity.

# Space Complexity Analysis:
# Space Complexity: O(1)
# The iterative approach uses a constant amount of memory since it doesn't rely on function call stacks or recursion. It only requires a few variables to store intermediate results.

"""
**Recursion:**
1. **Method**: Recursion is a programming technique where a function calls itself in order to solve a problem. It breaks a problem into smaller, similar subproblems.
2. **Control Flow**: It uses a function call stack to keep track of multiple recursive function calls. Each call is added to the stack, and the program returns from each call when a base case is met.
3. **Termination**: It requires a base case or a set of base cases to stop the recursive calls. Without a base case, recursion can result in an infinite loop.
4. **Memory Usage**: Recursive functions use memory to store intermediate results and function call information, which can lead to stack overflow errors if the recursion depth is too deep.
5. **Readability**: Recursive code can sometimes be more elegant and easier to understand, especially for problems that have a recursive structure.

**Iteration:**
1. **Method**: Iteration is a programming technique where a set of instructions is repeated in a loop. It involves explicit control structures like "for" and "while" loops.
2. **Control Flow**: It uses loops to repeat a block of code until a specific condition is met. There is no function call stack, and the flow of control is more explicit.
3. **Termination**: It relies on loop conditions or explicit exit conditions to stop execution. There is no need for a base case like in recursion.
4. **Memory Usage**: Iteration usually consumes less memory than recursion because there's no need to store function call information. It is less likely to lead to stack overflow errors.
5. **Readability**: Iterative code can be more verbose, especially for problems that have a repetitive structure. It may require more lines of code compared to recursive solutions.

**Use Cases:**

- **Recursion** is often used when the problem can be naturally divided into smaller, similar subproblems (e.g., recursive algorithms for tree traversal or dynamic programming problems).

- **Iteration** is commonly used when you need to perform a specific action repeatedly for a fixed number of times or as long as a certain condition is met (e.g., looping through an array or implementing iterative algorithms like sorting or searching).
"""
