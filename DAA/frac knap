Knapsack Problem : Given a set of items, each with a weight and a value, determine a subset of
items to include in a collection so that the total weight is less than or equal to a given limit and the
total value is as large as possible. The knapsack problem is in combinatorial optimization problem.
It appears as a subproblem in many, more complex mathematical models of real-world problems.
One general approach to difficult problems is to identify the most restrictive constraint, ignore the
others, solve a knapsack problem, and somehow adjust the solution to satisfy the ignored
constraints. The fractional knapsack problem is also one of the techniques which are used to solve
the knapsack problem. In fractional knapsack, the items are broken in order to maximize the profit.
The problem in which we break the item is known as a Fractional knapsack problem.
Greedy approach: In Greedy approach, we calculate the ratio of profit/weight, and accordingly,
we will select the item. The item with the highest ratio would be selected first.
The same approach we are using in our program.
 We have taken an array of structures named Item.
 Each Item has value & weight.
 We are calculating density= value/weight for each item and sorting the items array in
the order of decreasing density.
 We add values from the top of the array to totalValue until the bag is full
i.e. totalValue<=W ( where W is Knapsack weight).

There are basically three approaches to solve the problem:
 The first approach is to select the item based on the maximum profit.
 The second approach is to select the item based on the minimum weight.
 The third approach is to calculate the ratio of profit/weight.
Algorithm:
Algorithm: Greedy-Fractional-Knapsack (w[1..n], p[1..n], W)
for i = 1 to n
 do x[i] = 0
weight = 0
for i = 1 to n
 if weight + w[i] ≤ W then
 x[i] = 1
 weight = weight + w[i]
 else
 x[i] = (W - weight) / w[i]
 weight = W
 break
return x


Fractional Knapsack Problem using python
# Structure for an item which stores weight and
# corresponding value of Item
class Item:
	def __init__(self, profit, weight):
		self.profit = profit
		self.weight = weight

# Main greedy function to solve problem
def fractionalKnapsack(W, arr):

	# Sorting Item on basis of ratio
	arr.sort(key=lambda x: (x.profit/x.weight), reverse=True) 

	# Result(value in Knapsack)
	finalvalue = 0.0

	# Looping through all Items
	for item in arr:

		# If adding Item won't overflow, 
		# add it completely
		if item.weight <= W:
			W -= item.weight
			finalvalue += item.profit

		# If we can't add current Item, 
		# add fractional part of it
		else:
			finalvalue += item.profit * W / item.weight
			break
	
	# Returning final value
	return finalvalue


# Driver Code
if __name__ == "__main__":
	W = 50
	arr = [Item(60, 10), Item(100, 20), Item(120, 30)]

	# Function call
	max_val = fractionalKnapsack(W, arr)
	print(max_val)

// C++ program to solve fractional Knapsack Problem
#include <bits/stdc++.h>
using namespace std;
// Structure for an item which stores weight and corresponding value of Item
struct Item {
int value, weight;
// Constructor
Item(int value, int weight)
{
this->value = value;
this->weight = weight;
}
};
// Comparison function to sort Item according to val/weight ratio
bool cmp(struct Item a, struct Item b)
{
double r1 = (double)a.value / (double)a.weight;
double r2 = (double)b.value / (double)b.weight;
return r1 > r2;
}
double fractionalKnapsack(int W, struct Item arr[], int N)
{ sort(arr, arr + N, cmp);
double finalvalue = 0.0; // Result (value in Knapsack)
 for (int i = 0; i < N; i++) {
// If adding Item won't overflow, add it completely
if (arr[i].weight <= W) {
W -= arr[i].weight;
finalvalue += arr[i].value;
}
else
 {
finalvalue+= arr[i].value * ((double)W / (double)arr[i].weight);
break;
}
}
return finalvalue;
}
// Driver's code
int main()
{ int W = 50; // Weight of knapsack
Item arr[] = { { 60, 10 }, { 100, 20 }, { 120, 30 } };
 int N = sizeof(arr) / sizeof(arr[0]);
// Function call
cout << "Maximum value we can obtain = "
<< fractionalKnapsack(W, arr, N);
return 0;
}
Output:
Maximum value we can obtain = 240

# Time Complexity Analysis:
# - Sorting items: O(n*log(n)), where n is the number of items.
# - Iterating through the items: O(n), where n is the number of items.
# Overall time complexity: O(n*log(n)) + O(n), which simplifies to O(n*log(n)).

# Space Complexity Analysis:
# - Space required for the sorted items: O(n), where n is the number of items.
# - Space required for the knapsack: O(n), where n is the number of items.
# Overall space complexity: O(n) + O(n), which simplifies to O(n).

"""
Fractional Knapsack, also known as the Fractional Knapsack Problem, is a classic optimization problem in computer science and mathematics. It is a variation of the Knapsack Problem, where you are given a set of items, each with a weight and a value, and a knapsack with a maximum weight capacity. The goal is to determine the most valuable combination of items to include in the knapsack without exceeding its weight capacity. In the Fractional Knapsack version, you are allowed to take fractions of items, not just whole items.

Here's a step-by-step explanation of how the Fractional Knapsack Problem works:

1. Given Data:
   - A set of items, each characterized by its weight (w[i]) and its value (v[i]).
   - A knapsack with a maximum weight capacity (W).

2. Calculate the Value-to-Weight Ratios:
   For each item, calculate the value-to-weight ratio (v[i] / w[i]). This ratio represents how much value you get for each unit of weight. Sorting the items by this ratio in descending order is a common approach.

3. Initialize Variables:
   - Initialize a variable to keep track of the total value of items selected (initially set to 0).
   - Initialize a variable to keep track of the remaining weight capacity of the knapsack (initially set to W).

4. Iterate Over Items:
   - Iterate through the sorted items (sorted by value-to-weight ratio).
   - For each item, calculate how much of it can be added to the knapsack:
     - If the entire item fits into the knapsack (i.e., w[i] <= remaining capacity), add the entire item, update the total value, and subtract its weight from the remaining capacity.
     - If the item doesn't fit entirely, calculate the fraction that can fit (remaining capacity / w[i]), add that fraction to the knapsack, update the total value, and set the remaining capacity to zero.

5. Continue the process:
   Keep iterating through the sorted items until the knapsack is full (remaining capacity is zero) or there are no more items to consider.

6. Calculate the Final Value:
   The total value obtained after filling the knapsack with items (either partially or completely) is the maximum achievable value under the given constraints.

Fractional Knapsack is a greedy algorithm because, at each step, it selects the item with the highest value-to-weight ratio, making it a locally optimal choice. This approach may or may not lead to a globally optimal solution. It is important to note that Fractional Knapsack is used when fractional parts of items can be included, which is not the case in the traditional (0/1) Knapsack Problem, where items must be taken entirely or not at all.

-------------------------------------

A greedy approach is a problem-solving strategy used in algorithms and optimization, where decisions are made by selecting the best available option at each step, without considering the overall effect of those decisions. The greedy approach aims to find an optimal solution by making a series of locally optimal choices.

Key characteristics of a greedy approach include:

1. Local Optimization: At each step, the greedy algorithm makes a choice that appears to be the best option among those available. This choice is based solely on the current information without any consideration of future consequences.

2. Irreversibility: Greedy choices are generally not revisited or undone in later stages of the algorithm. Once a decision is made, it is considered final.

3. Simplicity: Greedy algorithms are typically straightforward and easy to implement. They involve simple rules or heuristics for making decisions.

4. Efficiency: Greedy algorithms are often efficient in terms of time complexity because they make simple decisions at each step.

5. Suboptimal Solutions: While greedy algorithms provide a solution quickly, they may not always yield the globally optimal solution. In some cases, they can produce solutions that are close to optimal but not guaranteed to be the absolute best.

Examples of Greedy Algorithms:

1. **Greedy Coin Change**: In the problem of making change with the fewest coins, a greedy approach would involve selecting the largest coin denomination at each step. While this usually works, it may not always yield the minimum number of coins for change.

2. **Dijkstra's Shortest Path Algorithm**: Dijkstra's algorithm for finding the shortest path in a weighted graph employs a greedy approach. It repeatedly selects the node with the smallest tentative distance to the starting point and explores its neighbors. This algorithm is guaranteed to work for non-negative edge weights.

3. **Prim's Minimum Spanning Tree**: Prim's algorithm builds a minimum spanning tree by iteratively selecting the edge with the smallest weight that connects a vertex in the tree with a vertex outside the tree. It guarantees a minimum spanning tree for graphs with non-negative edge weights.

4. **Fractional Knapsack**: As explained earlier, the Fractional Knapsack problem is solved using a greedy approach by selecting items with the highest value-to-weight ratios at each step.

It's important to note that while greedy algorithms are useful and efficient for many problems, they may not be appropriate for all situations. The choice of a greedy approach depends on the specific problem and its characteristics. In some cases, additional constraints or more complex algorithms may be required to find the optimal solution. Greedy algorithms are a valuable tool in an algorithm designer's toolkit, but they need to be used judiciously with an understanding of their limitations.
"""

