Branch and bound is an algorithm design paradigm which is generally used for solving
combinatorial optimization problems. These problems typically exponential in terms of time
complexity and may require exploring all possible permutations in worst case.
Let us consider below 0/1 Knapsack problem to understand Branch and Bound. Given two integer
arrays val[0..n-1] and wt[0..n-1] that represent values and weights associated with n items
respectively.
Find out the maximum value subset of val [] such that sum of the weights of this subset is smaller
than or equal to Knapsack capacity W. Let us explore all approaches for this problem.
1. A Greedy approach is to pick the items in decreasing order of value per unit weight. The
Greedy approach works only for fractional knapsack problem and may not produce correct
result for 0/1 knapsack.
2. We can use Dynamic Programming (DP) for 0/1 Knapsack problem. In DP, we use a 2D table
of size n x W. The DP Solution doesn’t work if item weights are not integers.
3. Since DP solution doesn’t always work, a solution is to use Brute Force. With n items, there
are 2n
solutions to be generated, check each to see if they satisfy the constraint, save maximum
solution that satisfies constraint. This solution can be expressed as tree

Branch and Bound The backtracking based solution works better than brute force by ignoring
infeasible solutions. We can do better (than backtracking) if we know a bound on best possible
solution subtree rooted with every node. If the best in subtree is worse than current best, we can
simply ignore this node and its subtrees. So we compute bound (best solution) for every node
and compare the bound with current best solution before exploring the node. Example bounds
used in below diagram are, A down can give $315, B down can $275, C down can
$225, D down can $125 and E down can $30. In the next article, we have discussed the process
to get these bounds.

Branch and bound is very useful technique for searching a solution but in worst case, we need
to fully calculate the entire tree. At best, we only need to fully calculate one path through the
tree and prune the rest of it.

Following is C++ implementation of above idea.

#include <iostream.h>
#include<conio.h>
using namespace std;
struct Item
{
 float weight;
 int value;
};
struct Node
{
 int level, profit, bound;
 float weight;
};
bool cmp(Item a, Item b)
{
 double r1 = (double)a.value / a.weight;
 double r2 = (double)b.value / b.weight;
 return r1 > r2;
}
int bound(Node u, int n, int W, Item arr[])
{
 if (u.weight >= W)
 return 0;
 int profit_bound = u.profit;
 int j = u.level + 1;
 int totweight = u.weight;
 while ((j < n) && (totweight + arr[j].weight <= W))
 {
 totweight += arr[j].weight;
 profit_bound += arr[j].value;
 j++;
 }
 if (j < n)
 profit_bound += (W - totweight) * arr[j].value /arr[j].weight;
 return profit_bound;
}

0/1 knapsack using Branch and Bound
from queue import Queue 
from typing import List

class KnapsackNode: 
	def __init__(self, items: List[int], value: int, weight: int): 
		self.items = items 
		self.value = value 
		self.weight = weight 


class Item: 
	def __init__(self, value: int, weight: int): 
		self.value = value 
		self.weight = weight 
		self.ratio = value / weight 


class Knapsack: 
	def __init__(self, maxWeight: int, items: List[Item]): 
		self.maxWeight = maxWeight 
		self.items = items 

	def solve(self) -> int: 
		self.items.sort(key=lambda x: x.ratio, reverse=True) 
		bestValue = 0
		queue = [KnapsackNode([], 0, 0)] 

		while queue: 
			node = queue.pop(0) 
			i = len(node.items) 

			if i == len(self.items): 
				bestValue = max(bestValue, node.value) 
			else: 
				item = self.items[i] 
				withItem = KnapsackNode( 
					node.items + [i], 
					node.value + item.value, 
					node.weight + item.weight 
				) 
				if self.isPromising(withItem, self.maxWeight, bestValue): 
					queue.append(withItem) 
				withoutItem = KnapsackNode( 
					node.items, 
					node.value, 
					node.weight 
				) 
				if self.isPromising(withoutItem, self.maxWeight, bestValue): 
					queue.append(withoutItem) 

		return bestValue 

	def isPromising(self, node: KnapsackNode, maxWeight: int, bestValue: int) -> bool: 
		return node.weight <= maxWeight and node.value + self.getBound(node) > bestValue 

	def getBound(self, node: KnapsackNode) -> float: 
		remainingWeight = self.maxWeight - node.weight 
		bound = node.value 

		for i in range(len(node.items), len(self.items)): 
			item = self.items[i] 

			if remainingWeight >= item.weight: 
				bound += item.value 
				remainingWeight -= item.weight 
			else: 
				bound += remainingWeight * item.ratio 
				break

		return bound


Algorithm:
Step 1: Sort all items in decreasing order of ratio of value per unit weight so that an upper bound
 can be computed using Greedy Approach.
Step 2: Initialize maximum profit, max Profit = 0
Step 3: Create an empty queue, Q.
Step 4: Create a dummy node of decision tree and enqueue it to Q. Profit and weight of dummy
 node are 0.
Step 5: Do following while Q is not empty.
Step 6: Extract an item from Q. Let the extracted item be u.
Step 7: Compute profit of next level node. If the profit is more than max Profit, then update
 Max Profit.
Step 8: Compute bound of next level node. If bound is more than max Profit, then add next level
 node to Q.
Step 9: Consider the case when next level node is not considered as part of solution and add a node
 to queue with level as next, but weight and profit without considering next level nodes.

# Time Complexity Analysis:
# The time complexity of the knapsack_branch_and_bound function can be summarized as O(n*log(n)) for the sorting step 
# in the best case, and potentially exponential (O(2^n)) in the worst case. The actual time taken to solve a specific instance
# of the problem will depend on the characteristics of the input data and the effectiveness of the pruning.

# Space Complexity Analysis:
# - The space complexity of this implementation is O(n) due to the recursion stack, where n is the number of items in the knapsack problem.

"""
The 0/1 Knapsack Problem is a classic optimization problem in computer science and mathematics. It is a problem of combinatorial optimization where the goal is to select a combination of items, each with a given weight and value, to maximize the total value while not exceeding a given weight limit (the capacity of the knapsack). The term "0/1" indicates that for each item, you can either choose to include it (1) or exclude it (0) in the knapsack, meaning you can't take a fractional part of an item. In other words, it's a binary choice for each item.

Here's a formal description of the problem:

- You have a set of n items, each with a specific weight (w_i) and value (v_i).
- You have a knapsack with a maximum weight capacity (W).
- You can choose to include or exclude each item in the knapsack (0 or 1).
- The goal is to find the combination of items to include in the knapsack, such that the total weight of the selected items does not exceed W, and the total value is maximized.

Mathematically, the problem can be defined as follows:

Maximize Σ(v_i * x_i) for i = 1 to n
Subject to Σ(w_i * x_i) for i = 1 to n ≤ W
x_i = 0 or 1 for all i

Where:
- v_i is the value of item i.
- w_i is the weight of item i.
- x_i is a binary variable (0 or 1) indicating whether item i is included (1) or excluded (0) from the knapsack.
- W is the maximum weight capacity of the knapsack.

The 0/1 Knapsack Problem is known to be an NP-hard problem, meaning there is no known algorithm to solve it optimally in polynomial time for all inputs. However, dynamic programming and branch and bound algorithms can be used to find the optimal solution for relatively small instances of the problem. For larger instances, heuristics and approximation algorithms are often used to find near-optimal solutions.

This problem has various practical applications, such as resource allocation, portfolio optimization, and cutting stock problems.

-----------------------------

Branch and Bound is a widely used algorithmic technique for solving optimization problems, particularly in combinatorial and discrete domains. It systematically explores the solution space by dividing it into smaller subproblems and bounding the search to find the best possible solution efficiently. It is often used when the problem cannot be solved using greedy or dynamic programming approaches. Here's an explanation of the Branch and Bound technique:

1. **Optimization Problems:** Branch and Bound is primarily used for optimization problems, where the goal is to find the best solution among a set of possible solutions. These problems often involve maximizing or minimizing an objective function under certain constraints.

2. **Systematic Search:** The key idea behind Branch and Bound is to explore the solution space in a systematic manner, similar to a tree search. It involves branching and bounding the search space to efficiently find the optimal solution.

3. **Main Components:**
   - **Branching:** At each node of the search tree, the algorithm makes branching decisions to divide the problem into smaller subproblems. These decisions often involve selecting one of several possible choices for a variable or element of the solution.
   - **Bounding:** The algorithm establishes bounds or estimates for each node in the search tree, allowing it to determine whether the subproblem at that node has the potential to lead to a better solution than the current best solution found. This helps in pruning unfruitful branches.
   - **Selection:** Branch and Bound maintains a priority queue or a list of nodes to be explored, and it selects nodes based on their bounds and estimates to ensure that more promising nodes are explored first.
   - **Completion:** The algorithm continues to branch and bound until it has explored the entire search tree or until the bounds of remaining unexplored nodes are worse than the best solution found so far.

4. **Termination and Pruning:** The algorithm terminates when it has explored the entire search space or when it determines that there cannot be a better solution than the current best solution. This pruning is achieved by comparing the bounds of nodes with the best solution found so far and skipping those nodes that are guaranteed to be suboptimal.

5. **Applications:** Branch and Bound can be applied to various optimization problems, including:
   - Traveling Salesman Problem (TSP)
   - 0/1 Knapsack Problem
   - Job Scheduling
   - Graph Coloring
   - Cutting Stock Problem
   - Combinatorial Auctions
   - Integer Linear Programming

6. **Complexity Analysis:** The efficiency of Branch and Bound depends on the problem's characteristics and the quality of the bounding function. In the worst case, it explores all nodes in the search tree, resulting in exponential time complexity. However, effective bounding strategies and heuristics can greatly improve its efficiency.

7. **Trade-offs:** Branch and Bound may not always guarantee the optimal solution, but it is designed to find good solutions efficiently. The quality of the solution found can depend on the quality of bounding estimates and the branching strategy used.

8. **Variations:** There are variations of Branch and Bound, such as Branch and Bound with Subproblems, which is used to solve larger problems by dividing them into smaller subproblems that can be solved optimally.

In summary, Branch and Bound is a powerful technique for solving optimization problems. It systematically explores the solution space by dividing it into smaller subproblems and bounding the search to find the best possible solution efficiently, making it a valuable tool in combinatorial and discrete optimization.
"""
