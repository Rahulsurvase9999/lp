Branch and bound is an algorithm design paradigm which is generally used for solving
combinatorial optimization problems. These problems typically exponential in terms of time
complexity and may require exploring all possible permutations in worst case.
Let us consider below 0/1 Knapsack problem to understand Branch and Bound. Given two integer
arrays val[0..n-1] and wt[0..n-1] that represent values and weights associated with n items
respectively.
Find out the maximum value subset of val [] such that sum of the weights of this subset is smaller
than or equal to Knapsack capacity W. Let us explore all approaches for this problem.
1. A Greedy approach is to pick the items in decreasing order of value per unit weight. The
Greedy approach works only for fractional knapsack problem and may not produce correct
result for 0/1 knapsack.
2. We can use Dynamic Programming (DP) for 0/1 Knapsack problem. In DP, we use a 2D table
of size n x W. The DP Solution doesn’t work if item weights are not integers.
3. Since DP solution doesn’t always work, a solution is to use Brute Force. With n items, there
are 2n
solutions to be generated, check each to see if they satisfy the constraint, save maximum
solution that satisfies constraint. This solution can be expressed as tree

Branch and Bound The backtracking based solution works better than brute force by ignoring
infeasible solutions. We can do better (than backtracking) if we know a bound on best possible
solution subtree rooted with every node. If the best in subtree is worse than current best, we can
simply ignore this node and its subtrees. So we compute bound (best solution) for every node
and compare the bound with current best solution before exploring the node. Example bounds
used in below diagram are, A down can give $315, B down can $275, C down can
$225, D down can $125 and E down can $30. In the next article, we have discussed the process
to get these bounds.

Branch and bound is very useful technique for searching a solution but in worst case, we need
to fully calculate the entire tree. At best, we only need to fully calculate one path through the
tree and prune the rest of it.

Following is C++ implementation of above idea.

#include <iostream.h>
#include<conio.h>
using namespace std;
struct Item
{
 float weight;
 int value;
};
struct Node
{
 int level, profit, bound;
 float weight;
};
bool cmp(Item a, Item b)
{
 double r1 = (double)a.value / a.weight;
 double r2 = (double)b.value / b.weight;
 return r1 > r2;
}
int bound(Node u, int n, int W, Item arr[])
{
 if (u.weight >= W)
 return 0;
 int profit_bound = u.profit;
 int j = u.level + 1;
 int totweight = u.weight;
 while ((j < n) && (totweight + arr[j].weight <= W))
 {
 totweight += arr[j].weight;
 profit_bound += arr[j].value;
 j++;
 }
 if (j < n)
 profit_bound += (W - totweight) * arr[j].value /arr[j].weight;
 return profit_bound;
}

0/1 knapsack using Branch and Bound
from queue import Queue 
from typing import List

class KnapsackNode: 
	def __init__(self, items: List[int], value: int, weight: int): 
		self.items = items 
		self.value = value 
		self.weight = weight 


class Item: 
	def __init__(self, value: int, weight: int): 
		self.value = value 
		self.weight = weight 
		self.ratio = value / weight 


class Knapsack: 
	def __init__(self, maxWeight: int, items: List[Item]): 
		self.maxWeight = maxWeight 
		self.items = items 

	def solve(self) -> int: 
		self.items.sort(key=lambda x: x.ratio, reverse=True) 
		bestValue = 0
		queue = [KnapsackNode([], 0, 0)] 

		while queue: 
			node = queue.pop(0) 
			i = len(node.items) 

			if i == len(self.items): 
				bestValue = max(bestValue, node.value) 
			else: 
				item = self.items[i] 
				withItem = KnapsackNode( 
					node.items + [i], 
					node.value + item.value, 
					node.weight + item.weight 
				) 
				if self.isPromising(withItem, self.maxWeight, bestValue): 
					queue.append(withItem) 
				withoutItem = KnapsackNode( 
					node.items, 
					node.value, 
					node.weight 
				) 
				if self.isPromising(withoutItem, self.maxWeight, bestValue): 
					queue.append(withoutItem) 

		return bestValue 

	def isPromising(self, node: KnapsackNode, maxWeight: int, bestValue: int) -> bool: 
		return node.weight <= maxWeight and node.value + self.getBound(node) > bestValue 

	def getBound(self, node: KnapsackNode) -> float: 
		remainingWeight = self.maxWeight - node.weight 
		bound = node.value 

		for i in range(len(node.items), len(self.items)): 
			item = self.items[i] 

			if remainingWeight >= item.weight: 
				bound += item.value 
				remainingWeight -= item.weight 
			else: 
				bound += remainingWeight * item.ratio 
				break

		return bound


Algorithm:
Step 1: Sort all items in decreasing order of ratio of value per unit weight so that an upper bound
 can be computed using Greedy Approach.
Step 2: Initialize maximum profit, max Profit = 0
Step 3: Create an empty queue, Q.
Step 4: Create a dummy node of decision tree and enqueue it to Q. Profit and weight of dummy
 node are 0.
Step 5: Do following while Q is not empty.
Step 6: Extract an item from Q. Let the extracted item be u.
Step 7: Compute profit of next level node. If the profit is more than max Profit, then update
 Max Profit.
Step 8: Compute bound of next level node. If bound is more than max Profit, then add next level
 node to Q.
Step 9: Consider the case when next level node is not considered as part of solution and add a node
 to queue with level as next, but weight and profit without considering next level nodes.
